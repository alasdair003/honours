import logging
import os
import time
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad

class RansomwareBenchmark:
    """ A proof-of-concept ransomware simulation for benchmarking encryption speed. """

    def __init__(self):
        self._key = b"16byteslongkey!!"  # Must be **16, 24, or 32** bytes for AES
        self.iv = b"0123456789abcdef"  # Static IV for testing consistency

    @property
    def key(self):
        """ Returns the encryption key. """
        return self._key

    def scan_filesystem(self, start_path="C:\\"):
        """ Scans the entire filesystem for files to simulate encryption. """
        files = []
        for root, _, filenames in os.walk(start_path, topdown=True):
            # Exclude sensitive system directories (avoids permission errors)
            if any(x in root.lower() for x in ["windows", "program files", "system32", "$recycle.bin", "appdata"]):
                continue

            for filename in filenames:
                file_path = os.path.join(root, filename)
                if not filename.endswith(".py"):  # Skip Python scripts
                    files.append(file_path)

        print(f"Scanned {len(files)} files.")
        return files

    def simulate_encryption(self, file_path):
        """ Simulates file encryption without modifying the file. """
        fake_data = b"TestData" * 100  # Simulated file content
        cipher = AES.new(self.key, AES.MODE_CBC, iv=self.iv)
        _ = cipher.encrypt(pad(fake_data, AES.block_size))  # Encrypt in memory

    def simulate_decryption(self, file_path):
        """ Simulates file decryption without modifying the file. """
        fake_encrypted_data = b"\x00" * 160  # Simulated encrypted file content
        cipher = AES.new(self.key, AES.MODE_CBC, iv=self.iv)
        _ = unpad(cipher.decrypt(fake_encrypted_data), AES.block_size)  # Decrypt in memory

    def benchmark(self, iterations=10000):
        """ Runs encryption and decryption benchmarks. """
        files = self.scan_filesystem()
        if not files:
            print("No files found for benchmarking.")
            return

        # Select a sample file for testing
        sample_file = files[0]

        # Benchmark encryption
        enc_start = time.time()
        for _ in range(iterations):
            self.simulate_encryption(sample_file)
        enc_end = time.time()
        avg_encryption_time = (enc_end - enc_start) / iterations

        # Benchmark decryption
        dec_start = time.time()
        for _ in range(iterations):
            self.simulate_decryption(sample_file)
        dec_end = time.time()
        avg_decryption_time = (dec_end - dec_start) / iterations

        print(f"\nBenchmark Results ({iterations} iterations, {len(files)} files scanned):")
        print(f"Average Encryption Time: {avg_encryption_time:.6f} sec")
        print(f"Average Decryption Time: {avg_decryption_time:.6f} sec")

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)

    benchmark = RansomwareBenchmark()
    benchmark.benchmark(iterations=10000)
