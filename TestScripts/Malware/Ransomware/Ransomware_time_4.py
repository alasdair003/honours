import os
import time
import random

class XORBenchmark:
    """Simulates ransomware by scanning the filesystem and encrypting file contents using XOR."""
    
    def __init__(self, key):
        self.key = key
    
    def xor_encrypt(self, data):
        """Encrypts or decrypts data using a simple XOR cipher."""
        return bytes([b ^ self.key for b in data])

    def simulate_encryption(self, file_data):
        """Encrypts file contents (without modifying the actual files)."""
        encrypted = self.xor_encrypt(file_data)  # Perform XOR operation
        return encrypted

    def simulate_decryption(self, encrypted_data):
        """Decrypts data (XOR is reversible)."""
        decrypted = self.xor_encrypt(encrypted_data)  # XOR again to decrypt
        return decrypted

    def get_files(self, root_path):
        """Scans the filesystem for all files."""
        file_list = []
        for root, _, files in os.walk(root_path):
            for file in files:
                file_path = os.path.join(root, file)
                file_list.append(file_path)
        return file_list

    def benchmark(self, iterations=10000, sample_size=10):
        """Runs encryption and decryption benchmarks on sampled files."""
        
        # Step 1: Scan the filesystem
        files = self.get_files("C:\\Users\\alasdairTRE")  # Change this to the test directory
        print(f"Scanned {len(files)} files.")

        # Step 2: Select a sample of files for benchmarking
        sample_files = random.sample(files, min(sample_size, len(files)))

        # Step 3: Read a small sample of file contents
        sample_data = []
        for file in sample_files:
            try:
                with open(file, "rb") as f:
                    sample_data.append(f.read(1024))  # Read 1KB from each file
            except Exception:
                continue  # Skip files that can't be read
        
        if not sample_data:
            print("No accessible files found for benchmarking.")
            return

        # Step 4: Benchmark encryption
        start_time = time.time()
        for _ in range(iterations):
            for data in sample_data:
                _ = self.simulate_encryption(data)
        end_time = time.time()
        avg_encrypt_time = (end_time - start_time) / (iterations * len(sample_data))

        # Step 5: Benchmark decryption
        start_time = time.time()
        for _ in range(iterations):
            for data in sample_data:
                encrypted = self.simulate_encryption(data)
                _ = self.simulate_decryption(encrypted)
        end_time = time.time()
        avg_decrypt_time = (end_time - start_time) / (iterations * len(sample_data))

        print("\nBenchmark Results ({} iterations, {} files scanned):".format(iterations, len(files)))
        print("Average Encryption Time: {:.6f} sec".format(avg_encrypt_time))
        print("Average Decryption Time: {:.6f} sec".format(avg_decrypt_time))

# Run the benchmark
xor_benchmark = XORBenchmark(key=0x42)  # Random XOR key
xor_benchmark.benchmark(iterations=10000, sample_size=10)
